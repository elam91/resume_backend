name: CI pipeline
on: [push, pull_request] #Which triggers there are available?
jobs:
  test-job:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ "3.11" ]
        
    container: python:${{ matrix.python-version }}-bullseye
        
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:15
        # Provide the password for postgres
        env:
          POSTGRES_DB: django_db
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_pass
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - run: echo "Starting build"
      - run: apt update && apt install -y gcc libpq-dev libz-dev
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Poetry
        run: |
            curl -fsS -o get-poetry.py https://install.python-poetry.org
            python get-poetry.py -y
            echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Run tests
        run: poetry run python manage.py test -v 3
        env:
          DJANGO_SETTINGS_MODULE: "resume_backend.settings"
          DJANGO_CONFIGURATION: Testing
          DATABASE_URL: "postgresql://django_user:django_pass@postgres/django_db"#  deploy:
#  deploy:
#    if: contains(fromJson('["refs/heads/prod"]'), github.ref)
#    needs: [ test-job ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@v3
#      - name: Install Poetry
#        run: |
#          curl -fsS -o get-poetry.py https://install.python-poetry.org
#          python get-poetry.py -y
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#      - name: export to requirements.txt
#        run: poetry export -f requirements.txt --output requirements.txt # if you have source code sources, you'll need to add --without-hashes flag also
#      - uses: superfly/flyctl-actions/setup-flyctl@master
#      - name: Deploying to fly.io
#        run: flyctl deploy --remote-only
#        env:
#          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

